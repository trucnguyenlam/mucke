#!/usr/bin/awk -f
BEGIN {
  if(N<=1) {
    print "*** genDmeSMVAsync.awk: non valid `N' (f.e. use -vN=2)" | "cat 1>&2"
    exit(1);
  }

  print "MODULE and-gate(in1,in2)"
  print "VAR"
  print "  out : boolean;"
  print "ASSIGN"
  print "  init(out) := 0;"
  print "  next(out) := (in1 & in2) union out;"
  print ""
  print "MODULE and-gate-init(in1,in2,init-out)"
  print "VAR"
  print "  out : boolean;"
  print "ASSIGN"
  print "  init(out) := init-out;"
  print "  next(out) := (in1 & in2) union out;"
  print ""
  print "MODULE or-gate(in1,in2)"
  print "VAR"
  print "  out : boolean;"
  print "ASSIGN"
  print "  init(out) := 0;"
  print "  next(out) := (in1 | in2) union out;"
  print ""
  print "MODULE c-element(in1,in2)"
  print "VAR"
  print "  out : boolean;"
  print "ASSIGN"
  print "  init(out) := 0;"
  print "  next(out) := "
  print "    case"
  print "      in1 = in2 : in1 union out;"
  print "      1 : out;"
  print "    esac;"
  print ""
  print "MODULE mutex-half(inp,other-out)"
  print "VAR"
  print "  out : boolean;"
  print "ASSIGN"
  print "  init(out) := 0;"
  print "  next(out) := inp union out;"
  print "TRANS"
  print "  !(next(out) & next(other-out))"
  print ""
  print "MODULE user"
  print "VAR"
  print "  req : boolean;"
  print "ASSIGN"
  print "  init(req) := 0;"
  print "  next(req) := (!ack) union req;"
  print ""
  print "MODULE cell(left,right,token)"
  print "VAR"
  print "  q : and-gate(f.out,n.out);"
  print "  f : c-element(d.out,i.out);"
  print "  d : and-gate(b.out,!u.ack);"
  print "  b : mutex-half(left.req,a.out);"
  print "  i : and-gate(h.out,!j.out);"
  print "  h : c-element(g.out,j.out);"
  print "  n : and-gate-init(!e.out,!m.out,!token);"
  print "  u : user;"
  print "  a : mutex-half(u.req,b.out);"
  print "  c : and-gate(a.out,!left.ack);"
  print "  g : or-gate(c.out,d.out);"
  print "  e : c-element(c.out,i.out);"
  print "  k : and-gate(g.out,!h.out);"
  print "  l : and-gate(k.out,m.out);"
  print "  p : and-gate(k.out,n.out);"
  print "  m : and-gate-init(!f.out,!n.out,token);"
  print "  r : and-gate(e.out,m.out);"
  print "  j : or-gate(l.out,ack);"
  print "DEFINE"
  print "  req := p.out;"
  print "  left.ack := q.out;"
  print "  u.ack := r.out;"
  print ""
  print "MODULE main"
  print "VAR"
  for(i=N; i>=1; i--) {
    printf "  e-" i " : cell(e-"
    printf ((i-1) + 1  ) % N + 1 ",e-"
    printf ((i-1) + N-1) % N + 1 ","
    if(i==N) print "1);"; else print "0);"
  }
  print ""
  print "SPEC"
  printf "  AG ! ( "
  for(i=1; i<N; i++) {
    for(j=i+1; j<=N; j++) {
      if(i>1 || j>2) printf "         "
      printf "e-" i ".u.ack & e-" j ".u.ack "
      if(i==N-1 && j==N) print ""; else print "|"
    }
  }
  print "       )"
  print ""
  print "-- SPEC AG (e-1.u.req -> EF e-1.u.ack)"
}
