/*****************************************************************************\
(C) 1997 Armin Biere 
$Id: abcd_cache.tmpl,v 1.2 2000-05-08 11:33:34 biere Exp $
\*****************************************************************************/

#include "abcd_cache.h"
#include "abcd_cache_int.h"
#include "abcd_types.h"
#include "abcd_manager.h"
#include "abcd_manager_int.h"
#include "abcd_node.h"
#include "abcd_node_int.h"
#include "abcd_util.h"

/*---------------------------------------------------------------------------*/

FUNCTION void
aBCD_mk_empty_CacheEntry
TYPE	struct aBCD_CacheEntry *
ARG	p
BODY
  /* Make sure that this is equivalent to setting all bits to zero!
   * (right now this function is just a comment since `memset' is used)
   */
  (p) -> op_idx_AND_arg0 = 0;
END

/*---------------------------------------------------------------------------*/

FUNCTION int
aBCD_is_empty_CacheEntry
TYPE	struct aBCD_CacheEntry *
ARG	p
BODY
  (p) -> op_idx_AND_arg0 == 0
END

/*---------------------------------------------------------------------------*/

FUNCTION aBCD_uint
aBCD_mk_op_arg0_CacheEntry
TYPE	aBCD_uint
ARG     oi
TYPE	aBCD_Idx
ARG     a0
BODY
  (a0 << ((sizeof(aBCD_uint)<<3) - aBCD_MaxIdxBits)) | oi
END

/*---------------------------------------------------------------------------*/

FUNCTION aBCD_uint
aBCD_op_of_CacheEntry
TYPE    struct aBCD_CacheEntry *
ARG     p
BODY
  ((p) -> op_idx_AND_arg0) & aBCD_MASK_OpIdx
END

/*---------------------------------------------------------------------------*/

FUNCTION aBCD_Idx
aBCD_arg0_of_CacheEntry
TYPE    struct aBCD_CacheEntry *
ARG     p
BODY
  (p) -> op_idx_AND_arg0 >> ((sizeof(aBCD_uint)<<3) - aBCD_MaxIdxBits)
END

/*---------------------------------------------------------------------------*/

FUNCTION aBCD_uint
aBCD_hash_cache_entry1
TYPE	enum aBCD_OpIdx
ARG	op_idx
TYPE	struct aBCD_Manager_ *
ARG	manager
TYPE	aBCD_Idx
ARG	arg0
BODY
  aBCD_hash2(arg0, op_idx, manager -> cache_mod_or_shift)
END
  
/*---------------------------------------------------------------------------*/

FUNCTION aBCD_uint
aBCD_hash_cache_entry2
TYPE	enum aBCD_OpIdx
ARG	op_idx
TYPE	struct aBCD_Manager_ *
ARG	manager
TYPE	aBCD_Idx
ARG	arg0
TYPE	aBCD_Idx
ARG	arg1
BODY
  aBCD_hash3(arg0, arg1, op_idx, manager -> cache_mod_or_shift)
END
  
/*---------------------------------------------------------------------------*/

FUNCTION aBCD_uint
aBCD_hash_cache_entry3
TYPE	enum aBCD_OpIdx
ARG	op_idx
TYPE	struct aBCD_Manager_ *
ARG	manager
TYPE	aBCD_Idx
ARG	arg0
TYPE	aBCD_Idx
ARG	arg1
TYPE	aBCD_Idx
ARG	arg2
BODY
  aBCD_hash4(arg0, arg1, arg2, op_idx, manager -> cache_mod_or_shift)
END

/*---------------------------------------------------------------------------*/

FUNCTION aBCD_uint
aBCD_hash_cache_entry_double
TYPE	enum aBCD_OpIdx
ARG	op_idx
TYPE	struct aBCD_Manager_ *
ARG	manager
TYPE	aBCD_Idx
ARG	arg0
BODY
  aBCD_hash2(arg0, op_idx, manager -> cache_mod_or_shift)
END
  
/*---------------------------------------------------------------------------*/

FUNCTION void
aBCD_find_cache_entry_2args
TYPE	struct aBCD_Manager_ *
ARG	manager
TYPE	enum aBCD_OpIdx
ARG	oi
TYPE	aBCD_Idx
ARG	a0
TYPE	aBCD_Idx
ARG	a1
TYPE	aBCD_Idx *
ARG	res_ptr
TYPE	int *
ARG	flag
BODY
  aBCD_uint h, oi_a0;
  struct aBCD_CacheEntry * cache_entry;

  h = aBCD_hash_cache_entry2(oi, manager, a0, a1);
  oi_a0 = aBCD_mk_op_arg0_CacheEntry(oi, a0);
  aBCD_inc_stats(manager, cache_searches);
  cache_entry = manager -> cache + h;

  /* a 2 args entry has no priority -> do not have to mask priority */

  if(cache_entry -> op_idx_AND_arg0 == oi_a0 &&
     cache_entry -> data.idx2.arg1 == a1)
    {
      *(flag) = 1;
      *(res_ptr) = cache_entry -> data.idx2.result;

      aBCD_inc_stats(manager, cache_hits);
    }
  else
    {
      aBCD_inc_stats_if(
        !aBCD_is_empty_CacheEntry(cache_entry), manager, cache_visited); 

      *(flag) = 0;
    }
END

/*---------------------------------------------------------------------------*/

FUNCTION void
aBCD_find_cache_entry_fraction
TYPE	struct aBCD_Manager_ *
ARG	manager
TYPE	aBCD_Idx
ARG	a0
TYPE	double *
ARG	res_ptr
TYPE	int *
ARG	flag
BODY
  aBCD_uint h, oi_a0;
  struct aBCD_CacheEntry * cache_entry;

  h = aBCD_hash_cache_entry1(aBCD_FRACTION_OpIdx, manager, a0);
  oi_a0 = aBCD_mk_op_arg0_CacheEntry(aBCD_FRACTION_OpIdx, a0);
  aBCD_inc_stats(manager, cache_searches);
  cache_entry = manager -> cache + h;
  
  if(cache_entry -> op_idx_AND_arg0 == oi_a0)
    {
      *(flag) = 1;
      *(res_ptr) = *(double*) cache_entry -> data.double1.result;

      aBCD_inc_stats(manager, cache_hits);
    }
  else
    {
      aBCD_inc_stats_if(
	!aBCD_is_empty_CacheEntry(cache_entry), manager, cache_visited); 

      *(flag) = 0;
    }
END

/*---------------------------------------------------------------------------*/
#ifdef PRIORITY
/*---------------------------------------------------------------------------*/

FUNCTION void
aBCD_insert_cache_entry_2args
TYPE	struct aBCD_Manager_ *
ARG	manager
TYPE	enum aBCD_OpIdx
ARG	oi
TYPE	aBCD_Idx
ARG	a0
TYPE	aBCD_Idx
ARG	a1
TYPE	aBCD_Idx
ARG	r
BODY
  aBCD_uint h, oi_a0;
  struct aBCD_CacheEntry * cache_entry;

  h = aBCD_hash_cache_entry2(oi, manager, a0, a1);
  oi_a0 = aBCD_mk_op_arg0_CacheEntry(oi, a0);
  cache_entry = manager -> cache + h;

  if((cache_entry -> op_idx_AND_arg0 & aBCD_PRIORITY))
    {
      cache_entry -> op_idx_AND_arg0 &= ~aBCD_PRIORITY;
    }
  else
    {
      aBCD_inc_stats_if(
        !aBCD_is_empty_CacheEntry(cache_entry), manager, cache_visited); 

      cache_entry -> op_idx_AND_arg0 = oi_a0;
      cache_entry -> data.idx2.arg1 = a1;
      cache_entry -> data.idx2.result = r;
    }
END

/*---------------------------------------------------------------------------*/

FUNCTION void
aBCD_find_cache_entry_3args
TYPE	struct aBCD_Manager_ *
ARG	manager
TYPE	enum aBCD_OpIdx
ARG	oi
TYPE	int
ARG	priority
TYPE	aBCD_Idx
ARG	a0
TYPE	aBCD_Idx
ARG	a1
TYPE	aBCD_Idx
ARG	a2
TYPE	aBCD_Idx *
ARG	res_ptr
TYPE	int *
ARG	flag
BODY
  aBCD_uint hash_val, oi_a0;
  struct aBCD_CacheEntry * cache_entry;

  hash_val = aBCD_hash_cache_entry3(oi, manager, a0, a1, a2);
  oi_a0 = aBCD_mk_op_arg0_CacheEntry(oi, a0);
  aBCD_inc_stats(manager, cache_searches);
  cache_entry = manager -> cache + hash_val;
  
  if((cache_entry -> op_idx_AND_arg0 & ~aBCD_PRIORITY) == oi_a0 &&
     cache_entry -> data.idx3.arg1 == a1 &&
     cache_entry -> data.idx3.arg2 == a2)
    {
      *(flag) = 1;
      *(res_ptr) = cache_entry -> data.idx3.result;
      if(priority) cache_entry -> op_idx_AND_arg0 |= aBCD_PRIORITY;

      aBCD_inc_stats(manager, cache_hits);
    }
  else
    {
      aBCD_inc_stats_if(
	!aBCD_is_empty_CacheEntry(cache_entry), manager, cache_visited);

      *(flag) = 0;
    }
END

/*---------------------------------------------------------------------------*/

FUNCTION void
aBCD_insert_cache_entry_3args
TYPE	struct aBCD_Manager_ *
ARG	manager
TYPE	enum aBCD_OpIdx
ARG	oi
TYPE	int
ARG	priority
TYPE	aBCD_Idx
ARG	a0
TYPE	aBCD_Idx
ARG	a1
TYPE	aBCD_Idx
ARG	a2
TYPE	aBCD_Idx
ARG	r
BODY
  aBCD_uint hash_val;
  struct aBCD_CacheEntry * cache_entry;
  aBCD_uint oi_a0;

  hash_val = aBCD_hash_cache_entry3(oi, manager, a0, a1, a2);
  oi_a0 = aBCD_mk_op_arg0_CacheEntry(oi, a0);
  cache_entry = manager -> cache + hash_val;

  if(!priority &&
     (cache_entry -> op_idx_AND_arg0 & aBCD_PRIORITY))
    {
      cache_entry -> op_idx_AND_arg0 &= ~aBCD_PRIORITY;
    }
  else
    {
      aBCD_inc_stats_if(
        aBCD_is_empty_CacheEntry(cache_entry), manager, cache_count);

      if(priority) oi_a0 |= aBCD_PRIORITY;

      cache_entry -> op_idx_AND_arg0 = oi_a0;
      cache_entry -> data.idx3.arg1 = a1;
      cache_entry -> data.idx3.arg2 = a2;
      cache_entry -> data.idx3.result = r;
    }
END

/*---------------------------------------------------------------------------*/

FUNCTION void
aBCD_insert_cache_entry_fraction
TYPE	struct aBCD_Manager_ *
ARG	manager
TYPE	aBCD_Idx
ARG	a0
TYPE	double
ARG	r
BODY
  aBCD_uint h, oi_a0;
  struct aBCD_CacheEntry * cache_entry;

  h = aBCD_hash_cache_entry1(aBCD_FRACTION_OpIdx, manager,  a0);
  oi_a0 = aBCD_mk_op_arg0_CacheEntry(aBCD_FRACTION_OpIdx, a0);
  cache_entry = manager -> cache + h;

  if((cache_entry -> op_idx_AND_arg0 & aBCD_PRIORITY))
    {
      cache_entry -> op_idx_AND_arg0 &= ~aBCD_PRIORITY;
    }
  else
    {
      aBCD_inc_stats_if(
        aBCD_is_empty_CacheEntry(cache_entry), manager, cache_count);

      cache_entry -> op_idx_AND_arg0 = oi_a0;
      *(double*) cache_entry -> data.double1.result = r;
    }
END

/*---------------------------------------------------------------------------*/
#else /* PRIORITY */
/*---------------------------------------------------------------------------*/

FUNCTION void
aBCD_insert_cache_entry_2args
TYPE	struct aBCD_Manager_ *
ARG	manager
TYPE	enum aBCD_OpIdx
ARG	oi
TYPE	aBCD_Idx
ARG	a0
TYPE	aBCD_Idx
ARG	a1
TYPE	aBCD_Idx
ARG	r
BODY
  aBCD_uint h, oi_a0;
  struct aBCD_CacheEntry * cache_entry;

  h = aBCD_hash_cache_entry2(oi, manager, a0, a1);
  oi_a0 = aBCD_mk_op_arg0_CacheEntry(oi, a0);
  cache_entry = manager -> cache + h;

  aBCD_inc_stats_if(
    aBCD_is_empty_CacheEntry(cache_entry), manager, cache_count); 

  cache_entry -> op_idx_AND_arg0 = oi_a0;
  cache_entry -> data.idx2.arg1 = a1;
  cache_entry -> data.idx2.result = r;
END

/*---------------------------------------------------------------------------*/

FUNCTION void
aBCD_find_cache_entry_3args
TYPE	struct aBCD_Manager_ *
ARG	manager
TYPE	enum aBCD_OpIdx
ARG	oi
TYPE	int
ARG	priority
TYPE	aBCD_Idx
ARG	a0
TYPE	aBCD_Idx
ARG	a1
TYPE	aBCD_Idx
ARG	a2
TYPE	aBCD_Idx *
ARG	res_ptr
TYPE	int *
ARG	flag
BODY
  aBCD_uint hash_val, oi_a0;
  struct aBCD_CacheEntry * cache_entry;

  hash_val = aBCD_hash_cache_entry3(oi, manager, a0, a1, a2);
  oi_a0 = aBCD_mk_op_arg0_CacheEntry(oi, a0);
  aBCD_inc_stats(manager, cache_searches);
  cache_entry = manager -> cache + hash_val;
  
  (void) priority;

  if(cache_entry -> op_idx_AND_arg0 == oi_a0 &&
     cache_entry -> data.idx3.arg1 == a1 &&
     cache_entry -> data.idx3.arg2 == a2)
    {
      *(flag) = 1;
      *(res_ptr) = cache_entry -> data.idx3.result;

      aBCD_inc_stats(manager, cache_hits);
    }
  else
    {
      aBCD_inc_stats_if(
	!aBCD_is_empty_CacheEntry(cache_entry), manager, cache_visited);

      *(flag) = 0;
    }
END

/*---------------------------------------------------------------------------*/

FUNCTION void
aBCD_insert_cache_entry_3args
TYPE	struct aBCD_Manager_ *
ARG	manager
TYPE	enum aBCD_OpIdx
ARG	oi
TYPE	int
ARG	priority
TYPE	aBCD_Idx
ARG	a0
TYPE	aBCD_Idx
ARG	a1
TYPE	aBCD_Idx
ARG	a2
TYPE	aBCD_Idx
ARG	r
BODY
  aBCD_uint hash_val;
  struct aBCD_CacheEntry * cache_entry;
  aBCD_uint oi_a0;

  hash_val = aBCD_hash_cache_entry3(oi, manager, a0, a1, a2);
  oi_a0 = aBCD_mk_op_arg0_CacheEntry(oi, a0);
  cache_entry = manager -> cache + hash_val;

  (void) priority;

  aBCD_inc_stats_if(
    aBCD_is_empty_CacheEntry(cache_entry), manager, cache_count);

  cache_entry -> op_idx_AND_arg0 = oi_a0;
  cache_entry -> data.idx3.arg1 = a1;
  cache_entry -> data.idx3.arg2 = a2;
  cache_entry -> data.idx3.result = r;
END

/*---------------------------------------------------------------------------*/

FUNCTION void
aBCD_insert_cache_entry_fraction
TYPE	struct aBCD_Manager_ *
ARG	manager
TYPE	aBCD_Idx
ARG	a0
TYPE	double
ARG	r
BODY
  aBCD_uint h, oi_a0;
  struct aBCD_CacheEntry * cache_entry;

  h = aBCD_hash_cache_entry1(aBCD_FRACTION_OpIdx, manager, a0);
  oi_a0 = aBCD_mk_op_arg0_CacheEntry(aBCD_FRACTION_OpIdx, a0);
  cache_entry = manager -> cache + h;

  aBCD_inc_stats_if(
    aBCD_is_empty_CacheEntry(cache_entry), manager, cache_count);

  cache_entry -> op_idx_AND_arg0 = oi_a0;
  *(double*) cache_entry -> data.double1.result = r;
END

/*---------------------------------------------------------------------------*/
#endif
/*---------------------------------------------------------------------------*/
